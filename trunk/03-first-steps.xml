<chapter id="first-steps">

	<!-- German Translation 2005-02-20 by Bernd Hengelein -->

	<title>Erste Schritte</title>

	<section id="first-steps-intro">
		<title>Einführung</title>
		<para>

		Jetzt werden wir sehen, wie man das traditionelle "Hallo Welt"-Programm in Python
		zum Laufen bekommt. Sie lernen dadurch, wie man Python-Programme schreibt,
		sie abspeichert und ausführt.

		<!-- We will now see how to run a traditional 'Hello World' program in Python. This will
		teach you how to write, save and run Python programs. -->

		</para>
		<para>

		Mit Python haben Sie zwei verschiedene Möglichkeiten, Ihr Programm auzuführen - zum
		einen über die interaktive Kommandozeile des Interpreters, oder indem Sie eine
		Quelldatei verwenden. Wir werden jetzt beide Varianten kennenlernen.

		<!-- There are two ways of using Python to run your program - using the interactive
		interpreter prompt or using a source file. We will now see how to use both the methods. -->

		</para>
	</section>
	<section id="interpreter-prompt">
		<title>Verwenden der Kommandozeile des Interpreters</title>
		<para>

		Starten Sie den Interpreter durch Eingabe von <command>python</command> auf der Kommandozeile.
		Jetzt geben Sie <literal>print 'Hello World'</literal> ein und drücken die <keycap>Enter</keycap>
		Taste. Als Ausgabe sollten Sie die Wörter <computeroutput>Hello World</computeroutput> sehen.

		<!-- Start the intepreter on the command line by entering <command>python</command> at the
		shell prompt. Now enter <literal>print 'Hello World'</literal> followed by the
		<keycap>Enter</keycap> key. You should see the words
		<computeroutput>Hello World</computeroutput> as output. -->

		</para>
		<para>

		Wenn Sie Windows benutzen, können Sie den Interpreter von der Kommandozeile starten, wenn die
		<envar>PATH</envar> Umgebungsvariable korrekt gesetzt ist. Alternativ dazu kann auch das Programm
		<acronym>IDLE</acronym> verwendet werden. IDLE ist die Abkürzung für Integrated DeveLopment
		Environment. Zum Starten klicken Sie auf <guimenu>Start</guimenu> -> <guisubmenu>Programme</guisubmenu>
		-> <guisubmenu>Python 2.3</guisubmenu> -> <guisubmenu>IDLE (Python GUI)</guisubmenu>.
		Linuxbenutzer können IDLE auch benutzen.

		<!-- For Windows users, you can run the interpreter in the command line if you have set
		the <envar>PATH</envar> variable appropriately. Alternatively, you can use the
		<acronym>IDLE</acronym> program. IDLE is short for Integrated DeveLopment Environment.
		Click on <guimenu>Start</guimenu> -> <guisubmenu>Programs</guisubmenu> ->
		<guisubmenu>Python 2.3</guisubmenu> -> <guisubmenu>IDLE (Python GUI)</guisubmenu>.
		Linux users can use IDLE too. -->

		</para>
		<para>

		Die Zeichen <![CDATA[<<<]]> sind die Eingabeaufforderung für Python Anweisungen.

		<!-- Note that the <![CDATA[<<<]]> signs are the prompt for entering Python statements. -->

		</para>
		<example>
			<title>Die Eingabeaufforderung des Python Interpreters</title> <!-- Using the python interpreter prompt -->

			<screen>
			<![CDATA[
$ python
Python 2.3.4 (#1, Oct 26 2004, 16:42:40)
[GCC 3.4.2 20041017 (Red Hat 3.4.2-6.fc3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> print 'Hallo Welt'
Hallo Welt
>>>
			]]>
			</screen>
			<!-- <![CDATA[
$ python
Python 2.3.4 (#1, Oct 26 2004, 16:42:40)
[GCC 3.4.2 20041017 (Red Hat 3.4.2-6.fc3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> print 'hello world'
hello world
>>>
			]]> -->
		</example>
		<para>

		Beachten Sie, dass Python Ihnen das Ergebnis der Eingabe sofort ausgiebt, nachdem Sie eine
		einzelne Python <emphasis>Anweisung</emphasis> eingegeben haben.
		Der Befehl <literal>print</literal> wird verwendet um (todo unsurprisingly) einen beliebigen
		Wert, der als Parameter übergeben wird, auszugeben. Hier wird der Text <literal>Hallo Welt</literal>
		übergeben und auf dem Bildschirm ausgegeben.

		<!-- Notice that Python gives you the output of the line immediately! What you just entered
		is a single Python <emphasis>statement</emphasis>. We use <literal>print</literal>
		to (unsurprisingly) print any value that you supply to it. Here, we are supplying the
		text <literal>Hello World</literal> and this is promptly printed to the screen. -->

		</para>
		<important>
			<title>Beenden der Python Eingabeaufforderung (todo: oder Kommandozeile)</title> <!-- How to quit the Python prompt -->
			<para>

			Wenn Sie IDLE verwenden oder in einer Linux/BSD Shell arbeiten,
			beenden Sie die Kommandozeile mit der Tastenkombination
			<keycombo><keycap>Strg</keycap><keycap>d</keycap></keycombo>.
			Für den Fall, dass Sie die Windows Eingabeaufforderung verwenden, drücken
			Sie <keycombo><keycap>Strg</keycap><keycap>z</keycap></keycombo> gefolgt von
			der <keycap>Eingabe</keycap> Taste.

			<!-- To exit the prompt, press
			<keycombo><keycap>Ctrl</keycap><keycap>d</keycap></keycombo>
			if you are using IDLE or are using a Linux/BSD shell. In case of the Windows
			command prompt, press <keycombo><keycap>Ctrl</keycap><keycap>z</keycap></keycombo>
			followed by <keycap>Enter</keycap>. -->

			</para>
		</important>
	</section>
	<section id="choosing-an-editor">
		<title>Die Auswahl des Editors</title> <!-- Choosing an Editor -->
		<para>

		Bevor wir anfangen Source Files fuer Python Programme zu schreiben, brauchen
		wir einen Texteditor zum editieren der Source Files. Die Wahl des Editors ist
		äußerst wichtig. TODO. Mit einem guten Editor fällt es Ihnen leichter Python
		Programme zu schreiben. Es macht Ihre Reise (todo - bessere Begriff als Reise) komfortabler
		und Sie werden Ihr Ziel schneller und sicherer erreichen.

		<!-- Before we move on to writing Python programs in source files, we need an editor
		to write the source files. The choice of an editor is crucial indeed.  You have
		to choose an editor as you would choose a car you would buy. A good editor will
		help you write Python programs easily, making your journey more comfortable and
		helps you reach your destination (achieve your goal) in a much faster and safer
		way. -->

		</para>
		<para>

		Eine der wichtigsten Anforderungen ist <emphasis role="bold">syntax highlighting</emphasis>.
		Dadurch werden die verschiedenen Teile Ihres Python Programms farblich hervorgehoben, so dass
		Sie Ihr Programm <emphasis>sehen</emphasis> und sich den Ablauf vorstellen können.

		<!-- One of the very basic requirements is <emphasis role="bold">syntax
		highlighting</emphasis> where all the different parts of your Python program are
		colorized so that you can <emphasis>see</emphasis> your program and visualize its
		running. -->

		</para>
		<para>

		Wenn Sie Windows verwenden, empfehle ich Ihnen IDLE zu verwenden. IDLE bieten Ihnen neben
		syntax highlighting und anderen Dingen auch die Möglichkeit Ihr Programm direkt in IDLE auzuführen.
		Eine wichtige Anmerkung: <emphasis role="bold">verwenden Sie nicht Notepad</emphasis> - es unterstützt
		weder syntax highligting noch das Einrücken von Text, was für uns ebenfalls sehr wichtig ist,
		wie wir später noch sehen werden. Gute Editoren wie IDLE (oder auch VIM) bieten Ihnen
		"automatische" (todo besser?) Hilfen für diese Aufgaben.

		<!-- If you are using Windows, then I suggest that you use IDLE. IDLE does syntax highlighting
		and a lot more such as allowing you to run your programs within IDLE among other things.
		A special note: <emphasis role="bold">don't use Notepad</emphasis> - it is a bad choice
		because it does not do syntax highlighting and also importantly it does not support
		indentation of the text which is very important in our case as we will see later. Good
		editors such as IDLE (and also VIM) will automatically help you do this. -->

		</para>
		<para>

		Als Benutzer von Linux/FreeBSD haben Sie eine grosse Auswahl an Editoren. Wenn Sie ein
		erfahrener Programmierer sind, haben Sie bestimmt schon <application>VIM</application>
		oder <application>Emacs</application> verwendet. Das sind natürlich zwei der leistungsfähigsten
		Editoren, von deren Verwendung Sie bei der Entwicklung Ihrer Python Programme profitieren werden.
		Ich persönlich verwende für die meisten meiner Programme <application>VIM</application>.
		Als Programmieranfänger kann ich Ihnen auch <application>Kate</application> empfehlen. Wenn Sie
		sich die Zeit nehmen, den Umgang mit VIM oder Emacs zu erlernen, empfiehlt es sich langfristig
		gesehen gleich beide Editoren zu lernen.

		<!-- If you are using Linux/FreeBSD, then you have a lot of choices for an editor. If you are
		an experienced programmer, then you must be already using <application>VIM</application>
		or <application>Emacs</application>. Needless to say, these are two of the most powerful
		editors and you will be benefitted by using them to write your Python programs. I
		personally use <application>VIM</application> for most of my programs. If you are a
		beginner programmer, then you can use <application>Kate</application> which is one of my
		favorites. In case you are willing to take the time to learn VIM or Emacs, then I highly
		recommend that you do learn to use either of them as it will be very useful for you in
		the long run. -->
		</para>
		<para>

		Wenn Sie sich noch nicht für einen Editor entscheiden konnten, dann hilft Ihnen
		vielleicht diese ausführliche <ulink url="http://www.python.org/cgi-bin/moinmoin/PythonEditors">
		Liste von Editoren für Python</ulink>. Sie können auch eine <acronym>IDE</acronym>
		(Integrated Development Environment / Integrierte Entwicklungsumgebung) für Python verwenden.
		Einzelheiten dazu finden Sie in der <ulink
		url="http://www.python.org/cgi-bin/moinmoin/IntegratedDevelopmentEnvironments">
		Liste von IDEs die Python unterstützen</ulink>. Der Einsatz einer IDE kann für umfangreiche
		Python Programme durchaus sinnvoll sein.

		<!-- If you still want to explore other choices of an editor, see the comprehensive
		<ulink url="http://www.python.org/cgi-bin/moinmoin/PythonEditors">list of Python
		editors</ulink> and make your choice. You can also choose an
		<acronym>IDE</acronym> (Integrated Development Environment) for Python. See the
		comprehensive <ulink
		url="http://www.python.org/cgi-bin/moinmoin/IntegratedDevelopmentEnvironments"
		>list of IDEs that support Python</ulink> for more details. Once you start writing
		large Python programs, IDEs can be very useful indeed. -->

		</para>
		<para>

		Nochmal zur Wiederholung: bitte verwenden Sie einen geeigneten Editor - dadurch kann
		das Schreiben von Python Programmen einfacher sein und mehr Spass machen.

		<!-- I repeat once again, please choose a proper editor - it can make writing Python
		programs more fun and easy. -->

		</para>
	</section>
	<section id="source-file">
		<title>Die Verwendung von Source Files</title> <!-- Using a Source File -->

		<para>

		Jetzt aber zurueck zum Programmieren. Traditionell ist das erste Programm das Sie schreiben
		und ausführen, wenn Sie eine neue Programmiersprache lernen, das 'Hello World' Programm -
		beim Ausführen macht es nichts anderes als 'Hello World' zu sagen. Simon Cozens
		<!-- Now let's get back to programming. There is a tradition that whenever you learn a new
		programming language, the first program that you write and run is the 'Hello World'
		program - all it does is just say 'Hello World' when you run it. As Simon Cozens -->
		<footnote>
			<para>
			einer der führenden Perl6/Parrot Hacker und Autor des
			fantastischen Buches 'Beginning Perl'
			<!-- one of the leading Perl6/Parrot hackers and the author of the amazing
			'Beginning Perl' book -->
			</para>
		</footnote>
		nennt es die 'traditionelle Beschwörung der Programmiergötter damit sie Dir helfen
		die Programmiersprache besser zu lernen' :).
		<!-- puts it, it is the 'traditional incantation to the programming gods to help you learn
		the language better' :) . -->
		</para>

		<para>

		Starten Sie den Editor Ihrer Wahl, geben Sie das folgende Programm ein und
		speichern Sie es unter <filename>hallowelt.py</filename>
		<!-- Start your choice of editor, enter the following program and save it as
		<filename>helloworld.py</filename> -->
		</para>

		<example>
			<title>Gebrauch einer Quelldatei</title> <!-- Using a Source File -->
			<programlisting>
			<![CDATA[
#!/usr/bin/python
# Dateiname: hallowelt.py
print 'Hallo Welt'
			]]>
<!--
			<![CDATA[
#!/usr/bin/python
# Filename : helloworld.py
print 'Hello World'
			]]>
-->
			</programlisting>
			<para>
				(Quelldatei: <ulink url="code/hallowelt.py">code/hallowelt.py</ulink>)
				<!-- (Source file: <ulink url="code/helloworld.py">code/helloworld.py</ulink>) -->
			</para>
		</example>
		<para>

		Um das Programm auszuführen, öffnen Sie eine Kommandozeilen-Umgebung (Linux-Terminal
		oder DOS-Eingabeaufforderung) und geben Sie den Befehl
		<command>python <replaceable>hallowelt.py</replaceable></command> ein.
		Wenn Sie IDLE benutzen, verwenden Sie das Menue <guimenu>Edit</guimenu> ->
		<guimenuitem>Run Script</guimenuitem> oder die Tastenkombination
		<keycombo><keycap>Strg</keycap><keycap>F5</keycap></keycombo>.
		Unten sehen Sie	die Ausgabe des Programms.

		<!-- Run this program by opening a shell (Linux terminal or DOS prompt) and entering the
		command <command>python <replaceable>helloworld.py</replaceable></command>. If you
		are using IDLE, use the menu <guimenu>Edit</guimenu> ->
		<guimenuitem>Run Script</guimenuitem> or the keyboard shortcut
		<keycombo><keycap>Ctrl</keycap><keycap>F5</keycap></keycombo>. The output is as shown
		below. -->

		</para>
		<section>
			<title>Ausgabe</title> <!-- Output -->
			<screen>
			<![CDATA[
$ python hallowelt.py
Hallo Welt
			]]>
			</screen>
			<!-- <![CDATA[
$ python helloworld.py
Hello World
			]]> -->
		</section>
		<para>

		Sie sehen die gleiche Ausgabe wie oben gezeigt? Glückwunsch! - Sie haben gerade Ihr erstes
		Python-Programm erfolgreich ausgeführt.

		<!-- If you got the output as shown above, congratulations! - you have successfully run your
		first Python program. -->

		</para>
		<para>

		Sollten Sie einen Fehler bekommen, überprüfen Sie bitte ob Sie es
		<emphasis>genau so</emphasis> wie oben angegeben abgetippt haben.
		Beachten Sie, dass Python zwischen Gross- und Kleinschreibung unterscheidet.
		D.h. <literal>print</literal> ist nicht das Gleiche wie <literal>Print</literal>.
		Stellen Sie auch sicher, dass sich keine Leerzeichen oder Tabs vor dem ersten Zeichen
		einer Zeile befinden - wir werden später sehen, warum das wichtig ist.

		<!-- In case you got an error, please type the above program <emphasis>exactly</emphasis> as
		shown and above and run the program again. Note that Python is case-sensitive i.e.
		<literal>print</literal> is not the same as <literal>Print</literal> - note the
		lowercase <literal>p</literal> in the former and the uppercase <literal>P</literal> in
		the latter. Also, ensure there are no spaces or tabs before the first character in each
		line - we will see why this is important later. -->

		</para>

		<section>
			<title>So funktioniert es</title> <!-- How It Works -->
			<para>

			Sehen wir uns die ersten beiden Zeilen des Programms an. Hierbei handelt es
			sich um <emphasis>Kommentare</emphasis> - alles was rechts des Zeichens
			<literal>#</literal> steht, ist ein Kommentar und dient hauptsächlich als
			Hinweis für Leser des Programms.

			<!-- Let us consider the first two lines of the program. These are called
			<emphasis>comments</emphasis> - anything to the right of the <literal>#</literal>
			symbol is a comment and is mainly useful as notes for the reader of the program. -->

			</para>
			<para>

			Ausser für den Spezialfall in der ersten Zeile interpretiert Python die
			Kommentare nicht. Diese erste Zeile wird <emphasis>shebang line</emphasis>
			genannt - wenn ihre Source File (todo übersetzen) mit den Zeichen <literal>#!</literal>
			und der Pfadangabe für ein Programm beginnt, weiss Ihr Linux/Unix System dass
			dieses Programm mit diesem Interpreter gestartet wird, wenn es ausgeführt
			werden soll. Eine Ausführliche Erklärung dazu folgt im
			<link linkend="executable-python-programs">nächsten Kapitel</link>.
			Unabhängig von der verwendeten Platform, können Sie das Programm immer ausführen
			indem Sie den Interpreter direkt in der Kommandozeile mit angeben
			<command>python <replaceable>helloworld.py</replaceable></command>.

			<!-- Python does not use comments except for the special case of the first line here.
			It is called the <emphasis>shebang line</emphasis> - whenever the first two
			characters of the source file are <literal>#!</literal> followed by the location
			of a program, this tells your Linux/Unix system that this program should be run
			with this interpreter when you <emphasis>execute</emphasis> the program. This is
			explained in detail in the <link linkend="executable-python-programs"
			>next section</link>. Note that you can always run the program on any platform by
			specifying the interpreter directly on the command line such as the command
			<command>python <replaceable>helloworld.py</replaceable></command>. -->

			</para>
			<important>
				<para>

				Verwenden Sie vernünftige Kommentare in Ihrem Programm um wichtige
				Details zu erklären - dadurch können Leser Ihres Programms leichter
				verstehen, wie es funktioniert. Vergessen Sie nicht, dass Sie in
				sechs Monaten derjenige sein könnten.

				<!-- Use comments sensibly in your program to explain some important details
				of your program - this is useful for readers of your program so that they
				can easily understand what the program is doing. Remember, that person
				can be yourself after six months! -->

				</para>
			</important>

			<para>

			Nach den Kommentaren kommt eine Python <emphasis>Anweisung</emphasis> - diese
			gibt den Text <literal>'Hello World'</literal> aus.
			<literal>print</literal> ist eigentlich ein Operator und <literal>'Hello World'</literal>
			wird als Zeichenkette (engl. string) bezeichnet. Keine Angst, wir werden diese
			Fachausdrücke später ausführlich besprechen.

			<!-- The comments are followed by a Python <emphasis>statement</emphasis> - this just
			prints the text <literal>'Hello World'</literal>. The <literal>print</literal>
			is actually an operator and <literal>'Hello World'</literal> is referred to as a
			string - don't worry, we will explore these terminologies in detail later. -->

			</para>
		</section>
	</section>
	<section id="executable-python-programs">
		<!--
		<title>Executable Python programs</title>
		-->
		<title>Ausführbare Python Programme</title>
		<para>

		Dieser Teil trifft nur für Linux/Unix Benutzer zu. Aber auch Benutzer von Windows
		könnte es interesieren, was es mit der ersten Zeile des Programms auf sich hat.
		Mit dem <command>chmod</command> Befehl ändern wir zuerst die Berechtigung des Programms
		so, dass es ausgeführt werden kann. Danach <emphasis>starten</emphasis> wir das
		Programm.

<!-- This applies only to Linux/Unix users but Windows users might be curious as well
		about the first line of the program. First, we have to give the program executable
		permission using the <command>chmod</command> command then <emphasis>run</emphasis>
		the source program. -->

		</para>
		<screen>
		<![CDATA[
$ chmod a+x hallowelt.py
$ ./hallowelt.py
Hallo Welt
		]]>
		</screen>
		<!-- <![CDATA[
$ chmod a+x helloworld.py
$ ./helloworld.py
Hello World
		]]> -->
		<para>

		Der Befehlt chmod wird hier verwendet um den "Modus" der Datei so zu ändern,
		dass alle Benutzer des Systems Rechte zum Ausführen des Programms bekommen
		(todo - wie übersetzt man das vernünftig?)
		Dannach wird das Programm direkt gestartet indem man den Pfad der Quelldatei
		eingiebt. Die Zeichen <literal>./</literal> geben an, dass sich die Datei im
		aktuellen Verzeichnis befindet.

		<!-- The chmod command is used here to <emphasis>ch</emphasis>ange the
		<emphasis>mod</emphasis>e of the file by giving e<emphasis>x</emphasis>ecute
		permission to <emphasis>a</emphasis>ll users of the system. Then, we execute the
		program directly by specifying the location of the source file. We use the
		<literal>./</literal> to indicate that the program is located in the current
		directory. -->

		</para>
		<para>

		Mehr Spass macht das Ganze noch, wenn Sie die Datei in <filename>hallowelt</filename>
		umbenennen und mit <command>./hallowelt</command> starten. Es funktioniert immer noch,
		da das System weiss, dass es das Programm mit dem Interpreter ausführen muss, der in
		der ersten Zeile der Quelldatei angegeben ist.

		<!-- To make things more fun, you can rename the file to just <filename>helloworld</filename>
		and run it as <command>./helloworld</command> and it will still work since the system
		knows that it has to run the program using the interpreter whose location is specified
		in the first line in the source file. -->

		</para>
		<para>

		Jetzt können Sie das Programm nur laufen lassen, wenn Sie den genauen Pfad des
		Programms wissen - aber vielleicht wollen Sie das Programm von jeder beliebigen
		Stelle starten? Um das zu erreichen können Sie das Programm in einem der Verzeichnisse
		aus der <envar>PATH</envar> Umgebungsvariable speichern. Immer wenn Sie ein beliebiges
		Programm starten, sucht das System in jedem Verzeichnis das in der <envar>PATH</envar>
		Variable enthalten ist und führt es aus. Wir können unser Programm auch von überall
		erreichbar machen, indem wir es einfach in eines der o.g. Verzeichnisse kopieren.

		<!-- You are now able to run the program as long as you know the exact path of the program
		- but what if you wanted to be able to run the program from anywhere? You can do this
		by storing the program in one of the directories listed in the <envar>PATH</envar>
		environment variable. Whenever you run any program, the system looks for that program
		in each of the directories listed in the <envar>PATH</envar> environment variable and
		then runs that program. We can make this program available everywhere by simply
		copying this source file to one of the directories listed in <envar>PATH</envar>. -->

		</para>
		<screen>
		<![CDATA[
$ echo $PATH
/opt/mono/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/swaroop/bin
$ cp hallowelt.py /home/swaroop/bin/hallowelt
$ hallowelt
Hallo Welt
		]]>
		</screen>
		<!-- <![CDATA[
$ echo $PATH
/opt/mono/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/swaroop/bin
$ cp helloworld.py /home/swaroop/bin/helloworld
$ helloworld
Hello World
		]]> -->
		<para>

		Um die <envar>PATH</envar> Variable anzuzeigen verwenden wir den Befehl
		<command>echo</command>. Durch Voranstellen von <literal>$</literal>
		weiss die Shell, dass wir uns für den Wert der Variable interessieren.
		Wie wir sehen, ist <filename>/home/swaroop/bin</filename> ein Verzeichnis
		aus der PATH Variable. <emphasis role="bold">swaroop</emphasis> ist dabei
		der Benutzer den ich auf meinem System verwende. Üblicherweise haben Sie auf
		Ihrem System ein entsprechendes Verzeichnis für Ihren Benutzernamen.
		Sie können auch wahlweise ein anderes Verzeichnis zu der <envar>PATH</envar>
		Variable hinzufügen. Dazu geben Sie <command>PATH=$PATH:/home/swaroop/mydir</command>
		in Ihre Shell ein, wobei <literal>'/home/swaroop/mydir'</literal> das Verzeichnis
		ist welches ich hinzugefügen will.

		<!-- We can display the <envar>PATH</envar> variable using the <command>echo</command>
		command and prefixing the variable name by <literal>$</literal> to indicate to the
		shell that we need the value of this variable. We see that
		<filename>/home/swaroop/bin</filename> is one of the directories in the PATH variable
		where <emphasis role="bold">swaroop</emphasis> is the username I am using in my
		system. There will usually be a similar directory for your username on your system.
		Alternatively, you can add a directory of your choice to the <envar>PATH</envar>
		variable - this can be done by running
		<command>PATH=$PATH:/home/swaroop/mydir</command> where
		<literal>'/home/swaroop/mydir'</literal> is the directory I want to add to the
		<envar>PATH</envar> variable. -->

		</para>
		<para>
		Dieses Verfahren ist sehr hilfreich, wenn Sie nützliche Skripte schreiben wollen,
		die man von überall und jederzeit ausführbar sein sollen.
		Das ist so, als ob Sie sich Ihr eigenes <command>cd</command> Kommando oder irgendeinen
		anderen Linux- oder DOS Befehl selbst schreiben.

		<!-- This method is very useful if you want to write useful scripts that you want to run
		the program anytime, anywhere. It is like creating your own commands just like
		<command>cd</command> or any other commands that you use in the Linux terminal or
		DOS prompt. -->

		</para>
		<caution>
			<para>

			Im Zusammenhang mit Python bedeuten die Begriffe Programm, Skript oder Software alle das Gleiche.
			<!-- W.r.t. Python, a program or a script or software all mean the same thing. -->
			<!-- (W.r.t. = With respect to) -->

			</para>
		</caution>
	</section>
	<section id="getting-help">
		<title>Wenn Sie Hilfe brauchen</title> <!-- Getting Help -->
		<para>

		Mit der ergebauten Hilfe (<literal>help</literal>) bekommen Sie zu jeder
		Funktion oder jeder Anweisung in Python eine kurze Information. Das ist vor allem sehr
		nützlich, wenn Sie die Kommandozeile des Interpreters verwenden. Wenn Sie z.B.
		<literal>help(str)</literal> eingeben, wird Ihnen die Hilfe zu der <literal>str</literal>
		Klasse angezeigt. Diese Klasse wird dazu verwendet um Text (strings, Zeichenketten)
		in Ihrem Programm zu speichern. Der Begriff "Klasse" wird in dem Kapitel über
		objektorientierte Programmierung ausführliche behandelt.
		<!-- FIXME : Put a link, linkend here -->

		<!-- If you need quick information about any function or statement in Python, then you can
		use the built-in <literal>help</literal> functionality. This is very useful especially
		when using the interpreter prompt. For example, run <literal>help(str)</literal> - this
		displays the help for the <literal>str</literal> class which is used to store all
		text (strings) that you use in your program. Classes will be explained in detail in
		the chapter on object-oriented programming. --> <!-- FIXME : Put a link, linkend here -->

		</para>
		<note>
			<para>

			Durch Drücken der Taste <keycap>q</keycap> verlassen Sie die Hilfe.

			<!-- Press <keycap>q</keycap> to exit the help. -->

			</para>
		</note>
		<para>
		Analog dazu können Sie für fast alles in Python Informationen bekommen. Durch den Aufruf von
		<literal>help()</literal> bekommen Sie Hilfe über <literal>help</literal> selbst.

		<!-- Similarly, you can obtain information about almost anything in Python. Use
		<literal>help()</literal> to learn more about using <literal>help</literal> itself! -->

		</para>
		<para>

		Wenn Sie Hilfe zu Operatoren wie <literal>print</literal> benötigen, müssen Sie die
		Umgebungsvariable <envar>PYTHONDOCS</envar> entsprechend setzen. Unter Linux/Unix können
		Sie das einfach mit dem <command>env</command> Befehl machen.

		<!--In case you need to get help for operators like <literal>print</literal>, then you need
		to set the <envar>PYTHONDOCS</envar> environment variable appropriately. This can be
		done easily on Linux/Unix using the <command>env</command> command. -->

		</para>
		<screen>
		<![CDATA[
$ env PYTHONDOCS=/usr/share/doc/python-docs-2.3.4/html/ python
Python 2.3.4 (#1, Oct 26 2004, 16:42:40)
[GCC 3.4.2 20041017 (Red Hat 3.4.2-6.fc3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> help('print')
		]]>
		</screen>
		<para>

		Wie Sie sehen, habe ich <literal>'print'</literal> in Anführungszeichen gesetzt, damit
		Python versteht, dass ich Hilfe zu 'print' haben möchte und nicht mit print etwas
		ausgeben will.

		<!-- You will notice that I have used quotes to specify <literal>'print'</literal> so that
		Python can understand that I want to fetch help about 'print' and I am not asking it
		to print something. -->

		</para>
		<para>

		Beachten Sie, dass der Pfad den ich angegeben habe der Pfad bei Fedore Core 3 Linux
		ist - bei anderen Linux Distributionen oder Versionen kann der Pfad variieren.

		<!-- Note that the location I have used is the location in Fedora Core 3 Linux - it may be
		different for different distributions and versions.
		NOTE: Update this section when using newer versions of Python or Fedora -->

		</para>
	</section>
	<section id="first-steps-summary">
		<title>Zusammenfassung</title> <!-- Summary -->
		<para>

		Sie können jetzt schon Python-Programme schreiben, abspeichern und ausführen lassen.
		Und jetzt wo Sie zu den Python-Benutzern gehören, wollen wir ein paar Konzepte der
		Programmiersprache Python lernen.

		<!-- You should now be able to write, save and run Python programs at ease. Now that you
		are a Python user, let's learn some more Python concepts. -->

		</para>
	</section>
</chapter>
