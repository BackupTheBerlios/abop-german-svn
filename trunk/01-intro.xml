<chapter id="introduction">
  <title>Einführung</title>
  
  <section id="introduction-section">
    <title>Einführung</title>
    
    <para>
      Python ist eine der wenigen Sprachen, die beanspruchen, sowohl <emphasis
      role="bold">einfach</emphasis> als auch <emphasis
      role="bold">mächtig</emphasis> zu sein. Sie werden positiv überrascht
      darüber sein, wie einfach es ist, sich auf die Lösung eines Problems zu
      konzentrieren, anstatt auf die Syntax und die Struktur der Sprache, mit
      der Sie programmieren.
    
    </para>
    <para>
      Die offizielle Einführung in Python ist
    
    
    <blockquote>
      <para>
        Python ist eine einfach zu lernende, mächtige Programmiersprache. Sie
        hat effiziente High-Level-Datenstrukturen und einen einfachen aber
        effektiven Zugang zur objektorientierten Programmierung. Die elegante
        Syntax und die dynamische Typisierung von Python, zusammen mit seiner
        interpretierten Natur, machen sie zur idealen Sprache für Scripting und
        für schnelle Anwendungsentwicklung in vielen Bereichen auf den meisten
        Plattformen.
      </para>
    </blockquote>
    
    Ich werde die meisten dieser Eigenschaften detailliert im nächsten Abschnitt
    besprechen.

    </para>
    <note>
      Guido van Rossum, der Schöpfer der Sprache Python, benannte sie nach der
      BBC-Show &quot;Monty Python's Flying Circus&quot;. Er ist kein besonderer
      Freund von Schlangen, die ihre Beutetiere dadurch töten, indem sie ihre
      langen Körper um sie schlingen und sie erdrücken.
    
    </note>
  </section>
  
  <section id="features-of-python">
    <title>Eigenschaften von Python</title>
    <variablelist>
      <varlistentry>
        <term>Einfach</term>
        <listitem>
          <para>
            Python ist eine einfache und minimalistische Sprache. Ein gutes
            Python-Programm zu lesen fühlt sich fast so an wie das Lesen von
            Englisch, wenngleich auch sehr striktem Englisch! Diese
            pseudocodeartige Natur von Python ist eine ihrer größten Stärken.
            Sie erlaubt es ihnen, sich auf die Lösung ihres Problems zu
            konzentrieren anstatt auf die Sprache an sich.
          
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Einfach zu lernen</term>
        <listitem>
          <para>
            Wie Sie sehen werden, ist es extrem einfach, mit Python zu beginnen.
            Python hat, wie bereits erwähnt, eine besonders einfache Syntax.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Freie und Open-Source-Software</term>
        <listitem>
          <para>
            Python ist ein Beispiel für <acronym>FLOSS</acronym>
            (Free/Libr&#233; and Open Source Software, Freie und
            Open-Source-Software). Einfach gesagt, können Sie frei Kopien
            solcher Software weitergeben, ihren Quellcode lesen, sie verändern
            und Teile von ihr in neuer Software verwenden. Außerdem werden Sie
            darüber aufgeklärt, dass Sie all dies machen dürfen. FLOSS basiert
            auf dem Konzept einer Gemeinschaft, die Wissen austauscht. Das ist
            einer Gründe, warum Python so gut ist &#045;&#045; es wurde von
            einer Gemeinschaft, die ein besseres Python haben möchte, geschaffen
            und wird von ihr permanent verbessert.
          
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Hochsprache</term>
        <listitem>
          <para>
            Wenn Sie Programme in Python schreiben, müssen Sie sich nie um die
            niedrig angesiedelten Details wie die Verwaltung des von Ihrem
            Programm verwendeten Speichers kümmern.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>portierbar</term>
        <listitem>
          <para>
            Aufgrund seiner Open-Source-Natur wurde Python auf viele Plattformen
            portiert (d.h. verändert, um auf ihnen zu laufen). Alle Ihre
            Python-Programme können auf diese Plattformen laufen, ohne dass Sie
            irgendwelche Änderungen an ihnen vornehmen müssen, vorausgesetzt,
            Sie sind vorsichtig genug, systemabhängige Funktionen zu vermeiden.
          </para>
          <para>
            Sie können Python auf folgenden Plattformen verwenden:
            Linux, Windows, FreeBSD, Macintosh, Solaris,
            OS/2, Amiga, AROS, AS/400, BeOS, OS/390, z/OS, Palm OS, QNX, VMS,
            Psion, Acorn RISC OS, VxWorks, PlayStation, Sharp Zaurus, Windows CE
            und sogar PocketPC!
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>interpretiert</term>
        <listitem>
          <para>
            Das benötigt eine kleine Erklärung.
          </para>
          <para>
            Ein in einer compilierten Sprache wie C oder C++ geschriebenes
            Programm wird aus der Quellsprache in eine Sprache übersetzt, die
            Ihr Computer versteht (Binärcode, also Nullen und Einsen). Dazu wird
            ein Compiler mit verschiedenen Schaltern und Optionen verwendet.
            Wenn Sie das resultierende Programm ausführen, kopiert eine
            Software, Linker oder Loader genannt, das Programm von der
            Festplatte in den Hauptspeicher des Computers und führt es dort aus.
          </para>
          <para id="python-vm">
            Im Gegensatz dazu muss ein in Python geschriebenes Programm nicht in
            Binärcode compiliert werden. Es genügt, das Programm direkt aus
            seinem Quellcode <emphasis>auszuführen</emphasis>. Python
            konvertiert den Quellcode in eine Zwischenform, Bytecode genannt,
            übersetzt diese in die Sprache Ihres Computers und führt das
            Ergebnis aus. All das führt dazu, dass die Benutzung von Python viel
            leichter macht, da Sie sich nicht um das Compilieren des Programms,
            über das korrekte Linken der benötigten Bibliotheken usw. kümmern
            müssen. Ihre Python-Programme werden dadurch auch einfacher
            portierbar, da Sie lediglich Ihr Python-Programm auf einen anderen
            Computer kopieren und es dort einfach funktioniert!
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>objektorientiert</term>
        <listitem>
          <para>
            Python unterstützt sowohl die an Prozeduren ausgerichtete Art des
            Programmierens, als auch das objektorientierte Programmieren. In
            <emphasis>prozeduralen</emphasis> Sprachen wird ein Programm um
            Prozeduren oder Funktionen herum aufgebaut, die lediglich Stücke von
            wiederverwendbarem Programmcode sind. In der objektorientierten
            Programmierung wird es um Objekte, die Daten und Funktionalität
            kombinieren, herum aufgebaut. Der Python-Weg der objektorientierten
            Programmierung ist sehr mächtig und zugleich einfach, insbesondere
            im Vergleich mit Sprachen wie C++ oder Java.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>erweiterbar</term>
        <listitem>
          <para>
            Falls es nötig ist, dass ein kritisches Codestück besonders schnell
            ausgeführt wird oder wenn Sie möchten, dass einige Algorithmen nicht
            offen lesbar sind, können Sie solche Teile Ihres Programms in C oder
            C++ schreiben und dann diese in Ihrem Python-Programm verwenden.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>einbettbar</term>
        <listitem>
          <para>
            Sie können Python in Ihre C- oder C++-Programme einbetten, um Ihnen
            eine Skripting-Fähigkeit zu verleihen.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ausführliche Bibliotheken</term>
        <listitem>
          <para>
            Die Python-Standardbibliothek ist in der Tat riesig. Mit ihrer
            Hilfe können Sie viele verschiedene Dinge verwenden: reguläre
            Ausdrücke, Dokumentationserzeugung, Unittests, Threading,
            Datenbankzugriff, Webbrowser, CGI, FTP, E-Mail, XML, XML-RPC, HTML,
            WAV-Dateien, Kryptographie, GUI (grafische Benutzerschnittstellen),
            Tk und systemabhängiges Zeug. Denken Sie daran: all das ist überall
            verfügbar, wo Python installiert ist. Das wird als die "Batteries
            included"-Philosophie von Python bezeichnet ("Batterien werden
            mitgeliefert").
          </para>
          <para>
            Neben der Standardbibliothek gibt es verschiedenen Bibliotheken von
            hoher Qualität, z.B. <ulink
            url="http://www.wxpython.org">wxPython</ulink>, <ulink
            url="http://www.twistedmatrix.com/products/twisted">Twisted</ulink>,
            <ulink url="http://www.pythonware.com/products/pil/index.htm">Python
            Imaging Library</ulink> und viele andere.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  
    <section id="introduction-summary">
      <title>Zusammenfassung</title>
      
      <para>
        Python ist in der Tat eine aufregende und mächtige Sprache. Sie hat die
        richtige Kombination von Leistung und Funktionsumfang, die das Schreiben
        von Python-Programmen zugleich einfach und erfreulich macht.
      </para>
    </section>
  </section>
  
  <section id="why-not-perl">
    <title>Warum nicht Perl?</title>
    
    <para>
      Perl ist, falls Sie es nicht bereits kennen, eine andere sehr populäre
      interpretierte Open-Source-Programmiersprache.
    </para>
    <para>
      Falls Sie jemals versucht haben, ein großes Programm in Perl zu schreiben,
      würden Sie diese Frage selbst beantworten! Anders ausgedrückt:
      Perl-Programm sind einfach, wenn sie klein sind, Perl glänzt, wenn es um
      kleine Hacks oder um Skripte geht, mit denen einfach etwas erledigt werden
      sollt. Sie werden jedoch schnell unhandlich, sobald Sie mit dem Schreiben
      von größeren Programmen beginnen. Ich sage das mit der Erfahrung, große
      Perl-Programme für Yahoo! geschrieben zu haben.
    </para>
    <para>
      Verglichen mit Perl sind Python-Programme auf alle Fälle einfacher,
      sauberer, leichter zu schreiben und deswegen verständlicher und leichter
      wartbar. Ich bewundere Perl und verwende es täglich für verschiedene
      Dinge. Aber wenn ich ein neues Programm schreibe, denke ich immer zuerst
      in Python-Begriffen, weil das für mich so natürlich geworden ist. Perl war
      so vielen Hacks und Veränderungen ausgesetzt, dass es sich ein ein großer,
      höllischer Hack anfühlt. Traurigerweise scheint das kommende Perl 6 hier
      keine Verbesserungen zu bringen.
    </para>
    <para>
      Der einzige und sehr bedeutsamste Vorteil, den ich bei Perl sehe, ist seine
      riesige <ulink url="http://cpan.perl.org">CPAN</ulink>-Bibliothek -- Das
      "Comprehensive Perl Archive Network". Wie der Name vermuten lässt, handelt
      es sich dabei um eine ungeheure Sammlung von Perl-Modulen, atemberaubend
      durch seine reine Größe und Tiefe -- Sie können nahezu alles, was mit
      einem Computer möglich ist, mit Hilfe dieser Module tun. Ein Grund dafür,
      dass Perl mehr Module als Python hat liegt darin, dass Perl schon länger
      existiert als Python. Vielleicht sollte ich einen
      Portiere-Perl-Module-nach-Python-Hackathon auf <ulink
      url="http://groups.google.com/groups?q=comp.lang.python">comp.lang.python</ulink>
      vorschlagen :)
    </para>
    <para>
      Außerdem wird die neue virtuelle Maschine <ulink
      url="http://www.parrotcode.org">Parrot</ulink> entwickelt, um das komplett
      neu entworfene Perl 6 und auch Python und andere interpretierte Sprache
      wie Ruby, PHP und Tcl ausführen zu können. Das bedeutet, dass Sie
      <emphasis>vielleicht</emphasis> in der Zukunft all diese Perl-Module mit
      Python verwenden können, Sie also das beste beider Welten haben werden:
      die mächtigen CPAN-Bibliotheken kombiniert mit der mächtigen
      Programmiersprache Python. Allerdings werden wir einfach abwarten müssen,
      was geschieht.
    </para>
  </section>
  
  <section id="what-programmers-say">
    <title>Was Programmierer sagen</title>
    <para>
      Es mag interessant sein, zu lesen, was Hacker wie ESR über Python sagen:
    </para>
    <itemizedlist>
      <listitem>
        <para>
        <emphasis role="bold">Eric S. Raymond</emphasis> ist der Autor von "The
        Cathedral and the Bazaar" und die Person, die den Begriff "Open Source"
        geprägt hat. Er sagt, dass <ulink
        url="http://www.linuxjournal.com/article.php?sid=3882">Python seine
        bevorzugte Programmiersprache geworden ist</ulink>. Sein Artikel war die
        Inspiration für meine erste Berührung mit Python.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Bruce Eckel</emphasis> ist der Autor der
          berühmten Bücher "Thinking in Java" und "Thinkting in C++". Er sagt,
          dass er mit keiner Sprache produktiver sei als mit Python. Python ist
          für ihn wohl die einzige Sprache, die sich darauf konzentriert, die
          Arbeit für den Programmierer einfacher zu machen. Lesen Sie das <ulink
          url="http://www.artima.com/intv/aboutme.html">vollständige
          Interview</ulink> für mehr Details.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Peter Norvig</emphasis> ist ein bekannter
          Lisp-Autor und Direktor für Suchqualität bei Google (vielen Dank an
          Guido van Rossum für diesen Hinweis). Er sagt, dass Python immer ein
          integraler Bestandteil von Google gewesen ist. Sie können diese
          Aussage überprüfen, wenn Sie sich die 
       <ulink
       url="http://www.google.com/jobs/index.html">Google-Jobs</ulink>-Seite
       anschauen, auf der Python-Kentnisse als Vorraussetzung für
       Softwareentwickler genannt werden.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Bruce Perens</emphasis> ist Mitbegründer von
          OpenSource.org und des UserLinux-Projekts. Das Ziel von UserLinux ist
          es, eine standardisierte Linux-Distribution zu schaffen, die von
          verschiedenen Herstellern unterstütz wird. Python hat Mitbewerber wie
          Perl und Ruby im Wettbewerb um die wesentliche von UserLinux
          unterstützte Programmiersprache geschlagen.
        </para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
